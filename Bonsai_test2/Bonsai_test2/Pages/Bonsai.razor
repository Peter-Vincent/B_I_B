@page "/bonsai"
@inject HttpClient Http
@inject IJSRuntime JS;



    <div @onkeypress="KeyHandler">
        <div @onmousemove="mouse_test">
        
        <button @onclick="class_test">Test class</button>
        <button @onclick="bonsai_test">Test Bonsai</button>
        <button @onclick="manual_test">Manual Test</button>
        <button @onclick="screen_test">Screen Test</button>
        <h1>Value counter -- @value</h1>
        <h2>Value2 counter -- @value2</h2>
        <h3> Mouse location -- @mouse</h3>
        <button @onclick="cpp_compile_test">Call OpenCV</button>
        <h3>JS Interop for Open CV -- @open_cv_value</h3>

        @if (xml_data.timer_data == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <p>@xml_data.timer_data</p>
        }

        @code {


            public void KeyHandler(KeyboardEventArgs e)
            {
                testc.event_source.Subject.OnNext(e);
                class_test();
            }

            public int value;
            public int value2;
            public double mouse;
            public double mouse_check;
            public int open_cv_value;
            Bonsai_func testc = new Bonsai_func();
            private void class_test()
            {
                value2 = testc.value2;
            }


            private async Task cpp_compile_test()
            {
                open_cv_value = await JS.InvokeAsync<int>("exampleJsFunctions.add_numbers", 63, 43);
            }


            private void screen_test()
            {
                testc.Launch_screen(xml_data.screen_data);
            }

            private void manual_test()
            {

                testc.Launch_key();
                value2 = testc.value2;
            }

            private void mouse_test(MouseEventArgs e)
            {
                testc.mouse_move.Subject.OnNext(e);

            }


            protected override async Task OnInitializedAsync()
            {
                xml_data.timer_data = await Http.GetStringAsync("Bonsai_files/timer.bonsai");
                xml_data.screen_data = await Http.GetStringAsync("Bonsai_files/screen.bonsai");
                xml_data.audio_data = await Http.GetStringAsync("Bonsai_files/audio.bonsai");
            }

            private void bonsai_test()
            {
                testc.Launch(xml_data.timer_data).Subscribe(x => { value = (int)x; StateHasChanged(); });
                testc.Launch_mouse().Subscribe(x => { mouse = (double)x.ScreenX; StateHasChanged(); });
                //value = testc.value;
            }


            public class xml_data
            {
                public static string timer_data { get; set; }
                public static string screen_data { get; set; }
                public static string audio_data { get; set; }
            }

        }
    </div>
    </div>
